package com.course.entity.vo;import com.course.entity.dao.BigCourseType;import com.course.entity.dao.SmallCourseType;import com.course.exception.CourseException;import com.course.service.IBigCourseTypeService;import com.course.service.ISmallCourseTypeService;import com.validator.MultipartFileNotEmptyCheck;import com.validator.NotEmptyCheck;import com.validator.RangeCheck;import io.swagger.annotations.ApiModelProperty;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.web.multipart.MultipartFile;import javax.validation.constraints.Positive;import java.io.Serializable;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.TimeUnit;import static com.course.constants.ServiceConstants.*;/** * @author zdh */@AllArgsConstructor@NoArgsConstructor@Data@Builder@Slf4jpublic class CourseVo implements Serializable {    private static final long serialVersionUID = 1L;    /**     * 课程名字     */    @ApiModelProperty("课程名字")    @NotEmptyCheck(message = "课程名字不能为空")    private String courseName;    /**     * 课程封面路径     */    @ApiModelProperty("课程压缩文件")    @MultipartFileNotEmptyCheck(message = "课程压缩文件不能为空")    private MultipartFile courseZipFile;    /**     * 大分类类型     */    @ApiModelProperty("大分类类型")    @Positive(message = "大分类类型不合法")    private Integer bigType;    /**     * 小分类类型     */    @ApiModelProperty("小分类类型")    @Positive(message = "小分类类型不合法")    private Integer smallType;    /**     * 课程是否启用     */    @ApiModelProperty("课程是否启用")    @RangeCheck(range = {1, 0}, message = "非法参数")    private Integer enable = 0;    public static void changeUploadState(RedisTemplate<String,String> redisTemplate,String taskId, String state) {        redisTemplate.opsForValue().set(COURSE_SERVICE_UPLOAD + taskId, state, 30, TimeUnit.MINUTES);    }    public static Map<String, String> getUploadState(RedisTemplate<String, String> redisTemplate, List<String> taskId) {        HashMap<String, String> res = new HashMap<>();        for (String id : taskId) {            String state = redisTemplate.opsForValue().get(COURSE_SERVICE_UPLOAD + id);            res.put(id,state==null?UPLOAD_FAILURE:state);        }        return res;    }    public void courseTypeCheck(IBigCourseTypeService iBigCourseTypeService, ISmallCourseTypeService iSmallCourseTypeService) {        BigCourseType bigCourseType = iBigCourseTypeService.getById(bigType);        if (bigCourseType == null) {            throw new CourseException("指定的课程大分类不存在");        }        SmallCourseType smallCourseType = iSmallCourseTypeService.getById(smallType);        if (smallCourseType == null) {            throw new CourseException("指定的课程小分类不存在");        }        //课程小类是否属于当前课程大类        if(!smallCourseType.getParentId().equals(bigCourseType.getId())){            throw new CourseException("课程小类不属于当前课程大类");        }    }}